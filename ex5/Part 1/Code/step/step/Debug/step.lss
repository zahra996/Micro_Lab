
step.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f9  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055d  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a4  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f7  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer0_init>:

// initialize timer, interrupt and variable
void timer0_init()
{
	// set up timer with prescaler = 256
	TCCR0 |= (1 << CS02);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	83 bf       	out	0x33, r24	; 51
	
	// initialize counter
	TCNT0 = 0;
  82:	12 be       	out	0x32, r1	; 50
	
	// enable overflow interrupt
	TIMSK |= (1 << TOIE0);
  84:	89 b7       	in	r24, 0x39	; 57
  86:	81 60       	ori	r24, 0x01	; 1
  88:	89 bf       	out	0x39, r24	; 57
	
	// enable global interrupts
	sei();
  8a:	78 94       	sei
	
	// initialize overflow counter variable
	tot_overflow = 0;
  8c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <tot_overflow>
  90:	08 95       	ret

00000092 <__vector_11>:
}

// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tot_overflow>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <tot_overflow>
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:

int main(void)
{
	DDRA = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  b8:	1b ba       	out	0x1b, r1	; 27
	DDRC = 0x00;
  ba:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  bc:	85 bb       	out	0x15, r24	; 21
	
	DDRD |= (1 << 0);
  be:	88 9a       	sbi	0x11, 0	; 17
	
	// initialize timer
	timer0_init();
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <timer0_init>
				
				if (TCNT0 >= 53)
				{
					
					flag2++;
					if (flag2 > 4) flag2 = 1;
  c4:	91 e0       	ldi	r25, 0x01	; 1
		} else if (flag2 == 2) {
			PORTA = 0x02;
		} else if (flag2 == 3) {
			PORTA = 0x04;
		} else if (flag2 == 4) {
			PORTA= 0x08;
  c6:	48 e0       	ldi	r20, 0x08	; 8
		if (flag2 == 1) {
			PORTA = 0x01;
		} else if (flag2 == 2) {
			PORTA = 0x02;
		} else if (flag2 == 3) {
			PORTA = 0x04;
  c8:	34 e0       	ldi	r19, 0x04	; 4
		}
		
		if (flag2 == 1) {
			PORTA = 0x01;
		} else if (flag2 == 2) {
			PORTA = 0x02;
  ca:	22 e0       	ldi	r18, 0x02	; 2
	timer0_init();
	
    /* Replace with your application code */
    while (1) 
    {
		d = PINC & 0b00000100;
  cc:	83 b3       	in	r24, 0x13	; 19
  ce:	84 70       	andi	r24, 0x04	; 4
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if (d == 0) {
  d4:	81 11       	cpse	r24, r1
  d6:	03 c0       	rjmp	.+6      	; 0xde <main+0x2a>
			flag = 1;
  d8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <flag>
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x32>
		}
		
		
		if (flag == 1) {
  de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	a1 f4       	brne	.+40     	; 0x10e <main+0x5a>
			if (tot_overflow >= 50)  
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tot_overflow>
  ea:	82 33       	cpi	r24, 0x32	; 50
  ec:	80 f0       	brcs	.+32     	; 0x10e <main+0x5a>
			{
				
				if (TCNT0 >= 53)
  ee:	82 b7       	in	r24, 0x32	; 50
  f0:	85 33       	cpi	r24, 0x35	; 53
  f2:	68 f0       	brcs	.+26     	; 0x10e <main+0x5a>
				{
					
					flag2++;
  f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag2>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
					if (flag2 > 4) flag2 = 1;
  fa:	85 30       	cpi	r24, 0x05	; 5
  fc:	18 f4       	brcc	.+6      	; 0x104 <main+0x50>
			{
				
				if (TCNT0 >= 53)
				{
					
					flag2++;
  fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag2>
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x54>
					if (flag2 > 4) flag2 = 1;
 104:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <flag2>
					TCNT0 = 0;            // reset counter
 108:	12 be       	out	0x32, r1	; 50
					tot_overflow = 0;     // reset overflow counter
 10a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <tot_overflow>
				}
			}
		}
		
		if (flag2 == 1) {
 10e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag2>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x66>
			PORTA = 0x01;
 116:	9b bb       	out	0x1b, r25	; 27
 118:	d9 cf       	rjmp	.-78     	; 0xcc <main+0x18>
		} else if (flag2 == 2) {
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x6e>
			PORTA = 0x02;
 11e:	2b bb       	out	0x1b, r18	; 27
 120:	d5 cf       	rjmp	.-86     	; 0xcc <main+0x18>
		} else if (flag2 == 3) {
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f4       	brne	.+4      	; 0x12a <main+0x76>
			PORTA = 0x04;
 126:	3b bb       	out	0x1b, r19	; 27
 128:	d1 cf       	rjmp	.-94     	; 0xcc <main+0x18>
		} else if (flag2 == 4) {
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	79 f6       	brne	.-98     	; 0xcc <main+0x18>
			PORTA= 0x08;
 12e:	4b bb       	out	0x1b, r20	; 27
 130:	cd cf       	rjmp	.-102    	; 0xcc <main+0x18>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
