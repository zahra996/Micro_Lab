
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a5  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000611  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000319  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 89 00 	call	0x112	; 0x112 <main>
  7a:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	_delay_ms(1);
}

void LCD_cmd(uint8_t cmd)
{
	LCD_DATA=cmd;
  82:	88 bb       	out	0x18, r24	; 24
	ctrl=0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	ctrl=0x00;
  94:	12 ba       	out	0x12, r1	; 18
  96:	83 ed       	ldi	r24, 0xD3	; 211
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <init_LCD>:
   
}
	
void init_LCD(void)
{
	LCD_cmd(0x38);
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  aa:	89 ef       	ldi	r24, 0xF9	; 249
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <init_LCD+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <init_LCD+0x10>
  b4:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x01);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  bc:	89 ef       	ldi	r24, 0xF9	; 249
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <init_LCD+0x1c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <init_LCD+0x22>
  c6:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x0E);
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <init_LCD+0x2e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <init_LCD+0x34>
  d8:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x80);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <LCD_write>:
	_delay_ms(50);
}

void LCD_write(uint8_t data)
{
	LCD_DATA=data;
  ee:	88 bb       	out	0x18, r24	; 24
	ctrl=0x05;
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_write+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_write+0x10>
  fe:	00 00       	nop
	_delay_ms(1);
	ctrl=0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	82 bb       	out	0x12, r24	; 18
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_write+0x1a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_write+0x20>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <main>:
void LCD_cmd(uint8_t cmd);
void init_LCD(void);
void LCD_write(uint8_t data);

int main(void)
{
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	2d 97       	sbiw	r28, 0x0d	; 13
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
    uint8_t text[]="Hello World!";
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x26>
	DDRB=0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 bb       	out	0x17, r24	; 23
	DDRD=0x07;
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	81 bb       	out	0x11, r24	; 17
	
	init_LCD();
 148:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
	LCD_cmd(0x0F);
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 152:	8e 01       	movw	r16, r28
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	7e 01       	movw	r14, r28
 15a:	8e e0       	ldi	r24, 0x0E	; 14
 15c:	e8 0e       	add	r14, r24
 15e:	f1 1c       	adc	r15, r1
	
	for (uint8_t i=0; i<13; i++)
	{
		LCD_write(text[i]);
 160:	f8 01       	movw	r30, r16
 162:	81 91       	ld	r24, Z+
 164:	8f 01       	movw	r16, r30
 166:	0e 94 77 00 	call	0xee	; 0xee <LCD_write>
	DDRD=0x07;
	
	init_LCD();
	LCD_cmd(0x0F);
	
	for (uint8_t i=0; i<13; i++)
 16a:	0e 15       	cp	r16, r14
 16c:	1f 05       	cpc	r17, r15
 16e:	c1 f7       	brne	.-16     	; 0x160 <main+0x4e>
		LCD_write(text[i]);
	}
	
	return 0;
   
}
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	2d 96       	adiw	r28, 0x0d	; 13
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
